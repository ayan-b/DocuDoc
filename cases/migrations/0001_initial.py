# Generated by Django 3.1.5 on 2021-01-19 10:37

import cases.models
import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('O', 'Other')], max_length=1, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('mobile_no', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True)),
                ('pin_code', models.CharField(blank=True, max_length=20)),
                ('license', models.FileField(blank=True, upload_to='')),
                ('other_info', models.TextField(blank=True, null=True)),
                ('access_token', models.CharField(blank=True, max_length=40, null=True)),
                ('refresh_token', models.CharField(blank=True, max_length=40, null=True)),
                ('expires_in', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cases_short_name', models.CharField(max_length=200, verbose_name='Short Name')),
                ('cases_description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Description')),
                ('patient_username', models.CharField(max_length=30, verbose_name='Patient User Name')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_date', models.DateTimeField(auto_now_add=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(default=True)),
                ('users', models.ManyToManyField(related_name='cases', to='cases.User')),
            ],
            options={
                'ordering': ['updated_date'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('document', models.FileField(upload_to=cases.models.get_upload_path)),
                ('document_type', models.PositiveSmallIntegerField(choices=[(1, 'Treatment'), (2, 'Prescription'), (3, 'Diagnosis')], default=1)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='cases.case')),
                ('user', models.ForeignKey(editable=False, max_length=30, on_delete=django.db.models.deletion.CASCADE, to='cases.user')),
            ],
            options={
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='MyLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.user')),
            ],
            options={
                'verbose_name_plural': 'myLibraries',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_date', models.DateTimeField(auto_now_add=True, verbose_name='Updated at')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Content')),
                ('comment_type', models.PositiveSmallIntegerField(choices=[(1, 'Treatment'), (2, 'Prescription'), (3, 'Diagnosis')], default=1)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cases.case')),
                ('user', models.ForeignKey(editable=False, max_length=30, on_delete=django.db.models.deletion.CASCADE, to='cases.user')),
            ],
            options={
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='BookmarkedCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.user')),
            ],
            options={
                'verbose_name_plural': 'bookmarked Cases',
            },
        ),
    ]
